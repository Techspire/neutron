diff --git a/neutron-qt.pro b/neutron-qt.pro
index e70b464..cf42e6f 100755
--- a/neutron-qt.pro
+++ b/neutron-qt.pro
@@ -1,3 +1,36 @@
+BDB_LIB_PATH=/usr/local/Cellar/berkeley-db\@4/4.8.30/lib
+BDB_INCLUDE_PATH=/usr/local/Cellar/berkeley-db\@4/4.8.30/include
+
+BOOST_LIB_PATH=/usr/local/Cellar/boost@1.60/1.60.0/lib
+BOOST_INCLUDE_PATH=/usr/local/Cellar/boost@1.60/1.60.0/include
+#-----
+###BOOST_LIB_PATH=/usr/local/Cellar/boost/1.67.0_1/lib
+###BOOST_INCLUDE_PATH=/usr/local/Cellar/boost/1.67.0_1/include
+
+OPENSSL_LIB_PATH=/usr/local/Cellar/openssl/1.0.2o_1/lib
+OPENSSL_INCLUDE_PATH=/usr/local/Cellar/openssl/1.0.2o_1/include
+
+MINIUPNPC_LIB_PATH=/usr/local/Cellar/miniupnpc/1.9.20151008/lib
+MINIUPNPC_INCLUDE_PATH=/usr/local/Cellar/miniupnpc/1.9.20151008/include
+
+QRENCODE_LIB_PATH=/usr/local/Cellar/qrencode/3.4.4/lib
+QRENCODE_INCLUDE_PATH=/usr/local/Cellar/qrencode/3.4.4/include
+
+
+
+QMAKE_MAC_SDK = macosx10.14
+QMAKE_MAC_SDK.macosx.SDKVersion = 10.14
+
+
+DEFINES += DEBUG_LOCKCONTENTION
+
+#DEFINES += DEBUG_LOCKCONTENTION DEBUG_LOCKORDER
+#DEBUG_LOCKCONTENTION=1
+#DEBUG_LOCKORDER=1
+
+# DEFINES += QT_GUI BOOST_THREAD_USE_LIB BOOST_SPIRIT_THREADSAFE BOOST_NO_CXX11_SCOPED_ENUMS
+
+
 TEMPLATE = app
 TARGET = Neutron-qt
 VERSION = 2.1.0
diff --git a/src/darksend.cpp b/src/darksend.cpp
index 09ff2a4..23b2105 100644
--- a/src/darksend.cpp
+++ b/src/darksend.cpp
@@ -2149,9 +2149,9 @@ void ThreadCheckDarkSend(CConnman& connman)
 
             {
                 if(nTick % 60 == 0){
-                    // // LOCK2(cs_main, cs_masternodes);
+                    LOCK2(cs_main, cs_masternodes);
 
-                    LOCK(cs_main);
+                    // LOCK(cs_main);
 
                     //     cs_main is required for doing CMasternode.Check because something
                     //     is modifying the coins view without a mempool lock. It causes
@@ -2160,7 +2160,10 @@ void ThreadCheckDarkSend(CConnman& connman)
 
                     if (fDebug) LogPrintf("ThreadCheckDarkSend: Check timeout\n");
 
+                    LogPrintf("ThreadCheckDarkSend: Calling CheckAndRemove\n");
                     mnodeman.CheckAndRemove();
+
+                    LogPrintf("ThreadCheckDarkSend: Calling CleanPaymentList\n");
                     masternodePayments.CleanPaymentList();
                 }
             }
diff --git a/src/main.cpp b/src/main.cpp
index cbb3b0f..56cbe37 100644
--- a/src/main.cpp
+++ b/src/main.cpp
@@ -1526,39 +1526,44 @@ bool CBlock::ConnectBlock(CTxDB& txdb, CBlockIndex* pindex, bool fJustCheck)
 
             int nDoS_PMTs = sporkManager.GetSporkValue(SPORK_4_PAYMENT_ENFORCEMENT_DOS_VALUE);
 
-            CScript payee;
+            CScript expectedPayee;
             CScript blockPayee;
-            bool fMasternodePaid = false;
-            bool fCorrectNodePaid = false;
-            bool fValidPayment = false;
+            bool fMnPaymentMade = false;
+            bool fPaidCorrectMn = false;
+            bool fValidMnPayment = false;
+
+            for (const CTxOut out : vtx[1].vout) {
+                if(out.nValue == nRequiredMnPmt) {
+                    fMnPaymentMade = true;
+                    blockPayee = out.scriptPubKey;
+                }
+            }
+
+            // case: expected masternode amount incorrect/none
+            if (!fMnPaymentMade) {
+                if (pindex->nHeight >= ENFORCE_MN_PAYMENT_HEIGHT) {
+                    return DoS(nDoS_PMTs, error("ConnectBlock() : Stake does not pay masternode expected amount"));
+                } else {
+                    LogPrintf("ConnectBlock() : Stake does not pay masternode expected amount\n");
+                }
+            }
 
-            // once masternode list obtained
+            // check payee once masternode list obtained
             if (isMasternodeListSynced) {
-                if (masternodePayments.GetBlockPayee(pindex->nHeight, payee)) {
-                    for (const CTxOut out : vtx[1].vout) {
-                        if(out.nValue == nRequiredMnPmt) {
-                            fMasternodePaid = true;
-                            blockPayee = out.scriptPubKey;
-                        }
-                        if (out.scriptPubKey == payee) {
-                            fCorrectNodePaid = true;
-                        }
-                        // verify correct payment addr and amount
-                        if (out.nValue == nRequiredMnPmt && out.scriptPubKey == payee) {
-                            fValidPayment = true;
-                            break;
-                        }
+                if (masternodePayments.GetBlockPayee(pindex->nHeight, expectedPayee)) {
+                    if (blockPayee == expectedPayee) {
+                        fPaidCorrectMn = true;
                     }
 
-                    CTxDestination dest;
-                    bool hasBlockPayee = ExtractDestination(blockPayee, dest);
-                    CBitcoinAddress paidMN(dest);
+                    CTxDestination paidDest;
+                    bool hasBlockPayee = ExtractDestination(blockPayee, paidDest);
+                    CBitcoinAddress paidMN(paidDest);
 
                     // case: expected masternode address not paid
-                    if (!fCorrectNodePaid) {
-                        CTxDestination dest;
-                        bool fPrintAddress = ExtractDestination(payee, dest);
-                        CBitcoinAddress addressMN(dest);
+                    if (!fPaidCorrectMn) {
+                        CTxDestination expectDest;
+                        bool fPrintAddress = ExtractDestination(expectedPayee, expectDest);
+                        CBitcoinAddress addressMN(expectDest);
 
                         if (fEnforceMnWinner) {
                             return DoS(nDoS_PMTs, error("ConnectBlock() : Stake does not pay correct masternode: actual=%s required=%s",
@@ -1570,29 +1575,22 @@ bool CBlock::ConnectBlock(CTxDB& txdb, CBlockIndex* pindex, bool fJustCheck)
                     } else {
                         LogPrintf("ConnectBlock() : Stake pays correct masternode, address=%s\n", hasBlockPayee ? paidMN.ToString() : "");
                     }
-
-                    // case: expected masternode amount incorrect/none
-                    if (!fMasternodePaid) {
-                        if (pindex->nHeight >= ENFORCE_MN_PAYMENT_HEIGHT) {
-                            return DoS(nDoS_PMTs, error("ConnectBlock() : Stake does not pay masternode expected amount"));
-                        } else {
-                            LogPrintf("ConnectBlock() : Stake does not pay masternode expected amount\n");
-                        }
-                    }
-
                 } else {
                     // case: was not able to determine correct masternode payee
-                    LogPrintf("ConnectBlock() : Did not find masternode payee for block %d\n", pindexBest->nHeight+1);
+                    LogPrintf("ConnectBlock() : Did not have expected masternode payee for block %d\n", pindexBest->nHeight+1);
                 }
 
-                if (!fValidPayment) {
+                // verify correct payment addr and amount
+                fValidMnPayment = fMnPaymentMade && fPaidCorrectMn;
+
+                if (!fValidMnPayment) {
                     if (fEnforceMnWinner)
                         return DoS(nDoS_PMTs, error("ConnectBlock() : Masternode payment missing or is not valid"));
                     else
                         LogPrintf("ConnectBlock() : Masternode payment missing or is not valid\n");
                 }
             } else {
-                LogPrintf("ConnectBlock() : Masternode list not yet synced - CountEnabled=%d\n", mnodeman.CountEnabled());
+                LogPrintf("ConnectBlock() : Masternode list not yet synced - (CountEnabled=%d)\n", mnodeman.CountEnabled());
             }
 
             //Check developer payment
diff --git a/src/masternode.cpp b/src/masternode.cpp
index eafe77e..4a506d2 100644
--- a/src/masternode.cpp
+++ b/src/masternode.cpp
@@ -770,7 +770,8 @@ bool CMasternodePayments::AddWinningMasternode(CMasternodePaymentWinner& winnerI
 
 void CMasternodePayments::CleanPaymentList()
 {
-    LOCK(cs_masternodes);
+    LOCK(cs_mapMasternodeBlocks);
+
     if(pindexBest == NULL) return;
 
     int nLimit = std::max(((int)vecMasternodes.size())*2, 1000);
@@ -887,6 +888,8 @@ void CMasternodePayments::Relay(CMasternodePaymentWinner& winner)
 
 void CMasternodePayments::Sync(CNode* node)
 {
+    LOCK(cs_mapMasternodeBlocks);
+
     int a = 0;
     for (auto const& it : mapMasternodeBlocks) {
         CMasternodePaymentWinner winner = it.second;
@@ -938,25 +941,31 @@ void CMasternodeMan::Check()
 {
     LOCK(cs_masternodes);
 
+    LogPrintf("CMasternodeMan::Check start\n");
+
     BOOST_FOREACH (CMasternode& mn, vecMasternodes) {
         mn.Check();
     }
+
+    LogPrintf("CMasternodeMan::Check finished\n");
 }
 
 void CMasternodeMan::CheckAndRemove()
 {
-    LogPrintf("CMasternodeMan::CheckAndRemove started\n");
+    LogPrintf("CMasternodeMan::CheckAndRemove start\n");
 
     {
         LOCK(cs_masternodes);
 
         Check();
 
-        LogPrintf("CMasternodeMan::CheckAndRemove remove masternodes\n");
+        LogPrintf("CMasternodeMan::CheckAndRemove before remove\n");
 
         //remove inactive and outdated
         vector<CMasternode>::iterator it = vecMasternodes.begin();
+        LogPrintf("CMasternodeMan::CheckAndRemove remove start\n");
         while (it != vecMasternodes.end()) {
+            LogPrintf("CMasternodeMan::CheckAndRemove - checking masternode %s - %s -- state: %d\n", (*it).addr.ToString().c_str(), (*it).vin.prevout.hash.ToString(), (*it).nActiveState);
             if((*it).nActiveState == CMasternode::MASTERNODE_REMOVE || (*it).nActiveState == CMasternode::MASTERNODE_VIN_SPENT){
                 LogPrintf("CMasternodeMan::CheckAndRemove - Removing inactive masternode %s - %s -- reason: %d\n", (*it).addr.ToString().c_str(), (*it).vin.prevout.hash.ToString(), (*it).nActiveState);
                 it = vecMasternodes.erase(it);
@@ -964,6 +973,8 @@ void CMasternodeMan::CheckAndRemove()
                 ++it;
             }
         }
+
+        LogPrintf("CMasternodeMan::CheckAndRemove remove finished\n");
     }
 
     // TODO: NTRN - do more checks here
@@ -972,7 +983,7 @@ void CMasternodeMan::CheckAndRemove()
         // no need for cm_main below
         LOCK(cs);
 
-        LogPrintf("CMasternodeMan::CheckAndRemove remove asked\n");
+        LogPrintf("CMasternodeMan::CheckAndRemove remove asked start\n");
 
         // check who's asked for the Masternode list
         auto it1 = mAskedUsForMasternodeList.begin();
@@ -983,6 +994,8 @@ void CMasternodeMan::CheckAndRemove()
                 ++it1;
             }
         }
+
+        LogPrintf("CMasternodeMan::CheckAndRemove remove asked finished\n");
     }
 
     LogPrintf("CMasternodeMan::CheckAndRemove finished\n");
diff --git a/src/rpcwallet.cpp b/src/rpcwallet.cpp
index bf4b7ff..bf3066b 100644
--- a/src/rpcwallet.cpp
+++ b/src/rpcwallet.cpp
@@ -86,6 +86,7 @@ UniValue getinfo(const UniValue& params, bool fHelp)
     GetProxy(NET_IPV4, proxy);
 
     UniValue obj(UniValue::VOBJ), diff(UniValue::VOBJ);
+    obj.push_back(Pair("tag",           "20181225-01"));
     obj.push_back(Pair("version",       FormatFullVersion()));
     obj.push_back(Pair("protocolversion",(int)PROTOCOL_VERSION));
     obj.push_back(Pair("walletversion", pwalletMain->GetVersion()));
